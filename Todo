* 	A correct Rascal grammar for the syntax of QL
* 	A meta-model/abstract syntax ADT for representing QL models
* 	A semantic checker hooked up to the IDE. This means that, if there are errors, they are shown in QL editors.
	- Basic type checking for integer, string and boolean expressions.
	- Check cyclic dependencies,
	- Check for duplicate questions with different types,
	- Check for computed and answerable questions that bind the same variable.
	- Check for undefined variables used in expressions.
	- Provide warnings for duplicate labels.
* 	A generator that converts QL models to an Java and/or JavaScript code. 
	This functionality should be made available in the IDE.
* 	Extending skeleton code:
	- Syntax for booleans, string literals. Don't forget to take care of keyword reservation: true and false should be parsed as boolean literals, not as identifiers.
	- the QL language should support date and (fixed-precision) decimal.
	- Add syntax productions for forms, questions, computed quetsions, types (int, bool, and string) and if-then and if-then-else statements. Use string literals for question labels. See the LWC'13 link above for an example questionnaire.
	- Add tests to check your syntax extensions.
	- Add AST classes for the provided expression categories, and for you syntactic extensions. Make sure the parser creates objects of the appropriate type.
	- Change the start symbol of the parser to parse forms, instead of Expressions.
*	Development of the QLS layout language (including IDE support). Include support for at least date picker, spin lock and radio button widgets. This language has to be designed!
*	Checking of the QLS language against the QL language.

* Naming convention for ident/expr/pos/neg/...

BONUS:
* 	Bonus exercise for Rascal variants: use SAT/SMT/Constraint solver to check for non-determinism.

Grading: See wiki


* Test the questions via the graph ? -> makes our compilation phase harder...
* Test the identifiers via the graph ? -> makes our compilation phase harder... 
* Randomized testing for semantic checker? -> how exactly are we going to do this